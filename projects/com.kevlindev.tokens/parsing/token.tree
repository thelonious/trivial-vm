// java -jar beaver.jar -T -w tokens.grammar
%package "com.kevlindev.tokens";

%import "java.io.IOException";
%import "java.util.List";
%import "java.util.HashMap";
%import "java.util.Map";

%import "com.kevlindev.text.ListIterator";
%import "com.kevlindev.text.ResettableIterator";
%import "com.kevlindev.text.StringIterator";

%class "TokenTreeParser";

%embed {:
	private Map<String, ResettableIterator<String>> properties = new HashMap<String, ResettableIterator<String>>();
	
	public Map<String, ResettableIterator<String>> getProperties() {
		return properties;
	}

	public Object parse(TokenNode root) {
		Object result = null;
		
		if (root != null) {
			TreeScanner scanner = new TreeScanner();

			scanner.setNode(root);

			try {
				result = parse(scanner);
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return result;
	}
:};

%terminals DOWN, UP;
%terminals ROOT, PACKAGE, LANGUAGE, KEYWORDS, OPERATORS, IDENTIFIER, STRING;

%typeof IDENTIFIER, STRING, Word = "Symbol";

%goal Grammar;

Grammar
	=	Tree
	;

Tree
	=	ROOT DOWN Statements UP
	;

Statements
	=	Statements Statement
	|	Statement
	;

Statement
	=	PACKAGE DOWN IDENTIFIER.i UP
		{:
			properties.put("package", new StringIterator(i.value.toString()));
			
			return i;
		:}
	|	LANGUAGE DOWN IDENTIFIER.i UP
		{:
			properties.put("language", new StringIterator(i.value.toString()));
			
			return i;
		:}
	|	KEYWORDS
	|	KEYWORDS DOWN Words.ws UP
		{:
			List<String> keywords = new ArrayList<String>();
			
			for (Object word : _list_ws) {
				Symbol wordSymbol = (Symbol) word;
				String content = (String) wordSymbol.value;
				
				if (wordSymbol.getId() == TokenType.STRING.getIndex()) {
					keywords.add(content.substring(1, content.length() - 1));
				} else {
					keywords.add(content);
				}
			}
			
			properties.put("keywords", new ListIterator(keywords));
			
			return _symbol_ws;
		:}
	|	OPERATORS
	|	OPERATORS DOWN Words.ws UP
		{:
			List<String> operators = new ArrayList<String>();
			
			for (Object word : _list_ws) {
				Symbol wordSymbol = (Symbol) word;
				String content = (String) wordSymbol.value;
				
				if (wordSymbol.getId() == TokenType.STRING.getIndex()) {
					operators.add(content.substring(1, content.length() - 1));
				} else {
					operators.add(content);
				}
			}
			
			properties.put("operators", new ListIterator(operators));
			
			return _symbol_ws;
		:}
	;

Words
	=	Words Word
	|	Word
	;

Word
	=	IDENTIFIER
	|	STRING
	;
