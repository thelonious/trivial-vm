// java -jar beaver.jar -T -w tvm-assembler.grammar
%package "com.kevlindev.tvm.assembler";

%import "com.kevlindev.tvm.assembler.ast.Instruction";
%import "com.kevlindev.tvm.assembler.ast.Opcode";
%import "com.kevlindev.tvm.assembler.ast.Operand";
%import "com.kevlindev.tvm.assembler.ast.OperandType";

%class "TVMParser";

%terminals BRK, SET, INC, BNE;
%terminals ADDRESS, REGISTER, NUMBER, LABEL, IDENTIFIER;
%terminals COMMA, LBRACKET, RBRACKET, PLUS;

%typeof Statement = "Instruction";
%typeof Container, Source, Destination = "Operand";
%typeof ADDRESS, REGISTER, NUMBER, LABEL, IDENTIFIER, Location = "String";

%goal Grammar;

Grammar
	=	Statements
	;

Statements
	=	Statements StatementWithLabel
	|	StatementWithLabel
	;

StatementWithLabel
	=	LABEL.l Statement.s
		{:
			s.setLabel(l);
			
			return s;
		:}
	|	Statement
	;

Statement
	=	SET Container.c COMMA Source.s
		{:
			return new Instruction(Opcode.SET, c, s);
		:}
	|	INC Container.c
		{:
			return new Instruction(Opcode.INC, c);
		:}
	|	BNE Destination.d
		{:
			return new Instruction(Opcode.BNE, d);
		:}
	|	BRK
		{:
			return new Instruction(Opcode.BRK);
		:}
	;

Container
	=	Location.l
		{:
			return new Operand(OperandType.ADDRESS, l);
		:}
	|	Location.l PLUS REGISTER.r
		{:
			return new Operand(OperandType.ADDRESS_INDEXED, l, r);
		:}
	|	LBRACKET Location.l RBRACKET
		{:
			return new Operand(OperandType.ADDRESS_INDIRECT, l);
		:}
	|	LBRACKET Location.l PLUS REGISTER.r RBRACKET
		{:
			return new Operand(OperandType.ADDRESS_INDIRECT_PRE_INDEXED, l, r);
		:}
	|	LBRACKET Location.l RBRACKET PLUS REGISTER.r
		{:
			return new Operand(OperandType.ADDRESS_INDIRECT_POST_INDEXED, l, r);
		:}
	|	LBRACKET Location.l PLUS REGISTER.r1 RBRACKET PLUS REGISTER.r2
		{:
			return new Operand(OperandType.ADDRESS_INDIRECT_PRE_AND_POST_INDEXED, l, r1, r2);
		:}

	|	REGISTER.r
		{:
			return new Operand(OperandType.REGISTER, r);
		:}
	|	LBRACKET REGISTER.r RBRACKET
		{:
			return new Operand(OperandType.REGISTER_INDIRECT, r);
		:}
	|	LBRACKET REGISTER.r1 PLUS REGISTER.r2 RBRACKET
		{:
			return new Operand(OperandType.REGISTER_INDIRECT_PRE_INDEXED, r1, r2);
		:}
	|	LBRACKET REGISTER.r1 RBRACKET PLUS REGISTER.r2
		{:
			return new Operand(OperandType.REGISTER_INDIRECT_POST_INDEXED, r1, r2);
		:}
	|	LBRACKET REGISTER.r1 PLUS REGISTER.r2 RBRACKET PLUS REGISTER.r3
		{:
			return new Operand(OperandType.REGISTER_INDIRECT_PRE_AND_POST_INDEXED, r1, r2, r3);
		:}
	;

Source
	=	Container
	|	NUMBER.n
		{:
			return new Operand(OperandType.NUMBER, n);
		:}
	;

Location
	=	ADDRESS
	|	IDENTIFIER
	;

Destination
	=	ADDRESS.a
		{:
			return new Operand(OperandType.ADDRESS, a);
		:}
	|	IDENTIFIER.i
		{:
			return new Operand(OperandType.LABEL, i);
		:}
	;
