// java -jar beaver.jar -T -w tvm-assembler.grammar
%package "com.kevlindev.tvm.assembler";

%import "java.io.IOException";
%import "java.util.HashMap";
%import "java.util.Map";

%import "com.kevlindev.tvm.Opcode";
%import "com.kevlindev.tvm.OperandType";
%import "com.kevlindev.tvm.assembler.model.Address";
%import "com.kevlindev.tvm.assembler.model.Identifier";
%import "com.kevlindev.tvm.assembler.model.Instruction";
%import "com.kevlindev.tvm.assembler.model.Operand";
%import "com.kevlindev.tvm.assembler.model.Program";
%import "com.kevlindev.tvm.assembler.model.Register";

%class "TVMParser";

%embed {:
	private Address createAddress(String text) {
		return new Address(Integer.parseInt(text.substring(1)));
	}

	private Register createRegister(String text) {
		return new Register(Integer.parseInt(text.substring(1)));
	}

	public Program parse(String source) {
		TVMLexer lexer = new TVMLexer();

		lexer.setSource(source);

		Object result = null;

		try {
			result = parse(lexer);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return (result instanceof Program) ? (Program) result : null;
	}
:};

%terminals BRK, CLR, INC, BEQ, BNE;
%terminals ADDRESS, REGISTER, LABEL, IDENTIFIER;
//%terminals COMMA, LBRACKET, RBRACKET, PLUS;

%typeof Statement = "Instruction";
%typeof Destination = "Operand";
%typeof ADDRESS, REGISTER, LABEL, IDENTIFIER = "String";

%goal Grammar;

Grammar
	=	Statements.s
		{:
			return new Program(_list_s);
		:}
	;

Statements
	=	Statements StatementWithLabel
	|	StatementWithLabel
	;

StatementWithLabel
	=	LABEL.l Statement.s
		{:
			s.setLabel(l.substring(1));

			return s;
		:}
	|	Statement
	;

Statement
	=	CLR REGISTER.r
		{:
			return new Instruction(Opcode.CLR, new Operand(OperandType.REGISTER, createRegister(r)));
		:}
	|	INC REGISTER.r
		{:
			return new Instruction(Opcode.INC, new Operand(OperandType.REGISTER, createRegister(r)));
		:}
	|	BEQ Destination.d
		{:
			return new Instruction(Opcode.BEQ, d);
		:}
	|	BNE Destination.d
		{:
			return new Instruction(Opcode.BNE, d);
		:}
	|	BRK
		{:
			return new Instruction(Opcode.BRK);
		:}
	;

Destination
	=	ADDRESS.a
		{:
			return new Operand(OperandType.ADDRESS, createAddress(a));
		:}
	|	IDENTIFIER.i
		{:
			return new Operand(OperandType.LABEL, new Identifier(i));
		:}
	;
