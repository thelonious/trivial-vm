package com.kevlindev.tvm.assembler;

import java.util.ArrayList;
import java.util.Map;
import com.kevlindev.tvm.Opcode;
import com.kevlindev.tvm.assembler.model.Instruction;
import java.io.IOException;
import java.util.HashMap;
import com.kevlindev.tvm.assembler.model.Operand;
import com.kevlindev.tvm.OperandType;
import beaver.*;
import com.kevlindev.tvm.assembler.model.Identifier;
import com.kevlindev.tvm.assembler.model.Program;
import com.kevlindev.tvm.assembler.model.Register;
import com.kevlindev.tvm.assembler.model.Address;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "tvm-assembler.grammar".
 */
public class TVMParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nrZziEWZ0GH6Sh0bO457tmqJ$bdxsYw3ejJIX4cvpEpcQswG8ugI953eiIDPP88hUUk2r" +
		"so63qp6g10XlF2XK0WM4luRnbPdJ5n5c#c7Acz5NEMKVA5D2qy2TpLwZBe7NGOr2VRSVS8V" +
		"PHtvBArQhQ$yd8pEz$P9f1z4DwyYGTUUXLBzIxtlIbRqOAxYRSq13XZeO8$s5c29C3rHULu" +
		"ous");

	private Address createAddress(String text) {
		return new Address(Integer.parseInt(text.substring(1)));
	}

	private Register createRegister(String text) {
		return new Register(Integer.parseInt(text.substring(1)));
	}

	public Program parse(String source) {
		TVMLexer lexer = new TVMLexer();

		lexer.setSource(source);

		Object result = null;

		try {
			result = parse(lexer);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return (result instanceof Program) ? (Program) result : null;
	}

	public TVMParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // Grammar = Statements.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final beaver.Symbol[] s = _list_s == null ? new beaver.Symbol[0] : (beaver.Symbol[]) _list_s.toArray(new beaver.Symbol[_list_s.size()]);
					
			return new Program(_list_s);
			}
			case 1: // Statements = Statements StatementWithLabel
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 2: // Statements = StatementWithLabel
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 3: // StatementWithLabel = LABEL.l Statement.s
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final String l = (String) _symbol_l.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final Instruction s = (Instruction) _symbol_s.value;
					
			s.setLabel(l.substring(1));

			return s;
			}
			case 5: // Statement = CLR REGISTER.r
			{
					final Symbol _symbol_r = _symbols[offset + 2];
					final String r = (String) _symbol_r.value;
					
			return new Instruction(Opcode.CLR, new Operand(OperandType.REGISTER, createRegister(r)));
			}
			case 6: // Statement = INC REGISTER.r
			{
					final Symbol _symbol_r = _symbols[offset + 2];
					final String r = (String) _symbol_r.value;
					
			return new Instruction(Opcode.INC, new Operand(OperandType.REGISTER, createRegister(r)));
			}
			case 7: // Statement = BEQ Destination.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final Operand d = (Operand) _symbol_d.value;
					
			return new Instruction(Opcode.BEQ, d);
			}
			case 8: // Statement = BNE Destination.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final Operand d = (Operand) _symbol_d.value;
					
			return new Instruction(Opcode.BNE, d);
			}
			case 9: // Statement = BRK
			{
					
			return new Instruction(Opcode.BRK);
			}
			case 10: // Destination = ADDRESS.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final String a = (String) _symbol_a.value;
					
			return new Operand(OperandType.ADDRESS, createAddress(a));
			}
			case 11: // Destination = IDENTIFIER.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					
			return new Operand(OperandType.LABEL, new Identifier(i));
			}
			case 4: // StatementWithLabel = Statement
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
